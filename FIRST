

How to run Python Program?
- Using The Read-Eval-Print-Loop or REPL or Interactive Interpreter
- Using Command line
- Using Web
- Using Executables


-----------1--------------
print "Hello, Python!"
4+5
4*2
-----------2--------------
#!/usr/bin/python
print "Hello, Python!"
--
$ chmod +x test.py     # This is to make file executable
$./test.py

-----------3--------------
Python Identifiers

-----------4--------------
Reserved Words

-----------5--------------
Lines and Indentation
# Python provides no braces to indicate blocks of code for class and function definitions or flow control.
# Blocks of code are denoted by line indentation, which is rigidly enforced.
# A code block (body of a function, loop etc.) starts with indentation and ends with the first unindented line. The amount of indentation is up to you, but it must be consistent throughout that block.

for i in range(1,11):
    print(i)
    if i == 5:
        break

if True:
    print('Hello')
    a = 5

if True: print('Hello'); a = 5

if True:
   print('True')
else:
   print('False')

# Incorrect indentation will result into IndentationError.
if True:
print "Answer"
print "True"
else:
print "Answer"
print "False"

-----------6--------------
Python Comments

#This is a single line comment
#print out Hello
print('Hello')

"""This is also a
perfect example of
multi-line comments"""
print('Hello')

-----------7--------------
Docstring in Python
# Docstring is short for documentation string.
# It is a string that occurs as the first statement in a module, function, class, or method definition. We must write what a function/class does in the docstring.

def double(num):
    """Function to double the value"""
    return 2*num

# Docstring is available to us as the attribute __doc__ of the function. Issue the following code in shell once you run the above program.
print(double.__doc__)

-----------8--------------
A variable is a named location used to store data in the memory.
number = 10
number = 1.1

website = "apple.com"
print(website)

# assigning a new variable to website
website = "programiz.com"
print(website)

a, b, c = 5, 3.2, "Hello"
print (a)
print (b)
print (c)

x = y = z = "same"
print (x)
print (y)
print (z)

-----------9--------------
Constants
# A constant is a type of variable whose value cannot be changed. 
# constants are written in all capital letters and underscores separating the words
# In reality, we don't use constants in Python. The globals or constants module is used throughout the Python programs.

- constant.py
PI = 3.14
GRAVITY = 9.8

- main.py
import constant
print(constant.PI)
print(constant.GRAVITY)

Rules and Naming Convention for Variables and constants
# Constant and variable names should have a combination of letters in lowercase (a to z) or uppercase (A to Z) or digits (0 to 9) or an underscore (_). For example:
snake_case
MACRO_CASE
camelCase
CapWords

# Create a name that makes sense. For example, vowel makes more sense than v.

# If you want to create a variable name having two words, use underscore to separate them. For example:
my_name
current_salary

# Use capital letters possible to declare a constant. For example:
PI
G
MASS
SPEED_OF_LIGHT
TEMP

# Never use special symbols like !, @, #, $, %, etc.

# Don't start a variable name with a digit.

-----------10--------------
Literals
# Literal is a raw data given in a variable or constant

#Integer Literal
a = 0b1010 #Binary Literals
b = 100 #Decimal Literal 
c = 0o310 #Octal Literal
d = 0x12c #Hexadecimal Literal

#Float Literal
float_1 = 10.5 
float_2 = 1.5e2

#Complex Literal 
x = 3.14j

print(a, b, c, d)
print(float_1, float_2)
print(x, x.imag, x.real)

# When we print the variables, all the literals are converted into decimal values

# A string literal is a sequence of characters surrounded by quotes. We can use both single, double or triple quotes for a string.

strings = "This is Python"
char = "C"
multiline_str = """This is a multiline string with more than one line code."""
unicode = u"\u00dcnic\u00f6de"
raw_str = r"raw \n string"

print(strings)
print(char)
print(multiline_str)
print(unicode)
print(raw_str)

# A Boolean literal can have any of the two values: True or False.
x = (1 == True)
y = (1 == False)
a = True + 4
b = False + 10

print("x is", x)
print("y is", y)
print("a:", a)
print("b:", b)

# Boolean literals
# A Boolean literal can have any of the two values: True or False.
x = (1 == True)
y = (1 == False)
a = True + 4
b = False + 10

print("x is", x)
print("y is", y)
print("a:", a)
print("b:", b)

# READ MORE ABOUT Special literals
# READ MORE ABOUT Literal Collections




IMP
https://www.programiz.com/python-programming/variables-constants-literals


-----------11--------------
Data types in Python
# Every value in Python has a datatype. 
# Since everything is an object in Python programming, data types are actually classes and variables are instance (object) of these classes.

# Python Numbers
# Integers, floating point numbers and complex numbers falls under Python numbers category. They are defined as int, float and complex class in Python.
# We can use the type() function to know which class a variable or a value belongs to 
# The isinstance() function to check if an object belongs to a particular class.

a = 5
print(a, "is of type", type(a))

a = 2.0
print(a, "is of type", type(a))

a = 1+2j
print(a, "is complex number?", isinstance(1+2j,complex))

# Integers can be of any length, it is only limited by the memory available.

# A floating point number is accurate up to 15 decimal places. Integer and floating points are separated by decimal points. 1 is integer, 1.0 is floating point number.

# Complex numbers are written in the form, x + yj, where x is the real part and y is the imaginary part. Here are some examples.

>>> a = 1234567890123456789
>>> a
1234567890123456789
>>> b = 0.1234567890123456789
>>> b
0.12345678901234568
>>> c = 1+2j
>>> c
(1+2j)

Python List
List is an ordered sequence of items. It is one of the most used datatype in Python and is very flexible. All the items in a list do not need to be of the same type.

a = [5,10,15,20,25,30,35,40]

# a[2] = 15
print("a[2] = ", a[2])

# a[0:3] = [5, 10, 15]
print("a[0:3] = ", a[0:3])

# a[5:] = [30, 35, 40]
print("a[5:] = ", a[5:])

# Python Tuple
# Tuple is an ordered sequence of items same as list.The only difference is that tuples are immutable. Tuples once created cannot be modified.

t = (5,'program', 1+3j)

# t[1] = 'program'
print("t[1] = ", t[1])

# t[0:3] = (5, 'program', (1+3j))
print("t[0:3] = ", t[0:3])

# Generates error
# Tuples are immutable
t[0] = 10


Python Strings
String is sequence of Unicode characters. We can use single quotes or double quotes to represent strings. Multi-line strings can be denoted using triple quotes, ''' or """.

s = 'Hello world!'

print("s = ", s)

# s[4] = 'o'
print("s[4] = ", s[4])

# s[6:11] = 'world'
print("s[6:11] = ", s[6:11])

# Generates error
# Strings are immutable in Python
s[5] ='d'

Python Set
Set is an unordered collection of unique items. Set is defined by values separated by comma inside braces { }. Items in a set are not ordered.
a = {5,2,3,1,4}

# printing set variable
print("a = ", a)

# data type of variable a
print(type(a))

# Python Dictionary
# Dictionary is an unordered collection of key-value pairs.
d = {1:'value','key':2}
print(type(d))

print("d[1] = ", d[1]);

print("d['key'] = ", d['key']);

# Generates error
print("d[2] = ", d[2]);

# Conversion between data types
We can convert between different data types by using different type conversion functions like int(), float(), str() etc.

float(5)
int(10.6)
float('2.5')
str(25)
int('1p')

set([1,2,3])
tuple({5,6,7})
list('hello')
dict([[1,2],[3,4]])
dict([(3,26),(4,44)])

https://www.programiz.com/python-programming/variables-datatypes

-----------12--------------
Python Input, Output and Import
# We use the print() function to output data to the standard output device (screen).

print('This sentence is output to the screen')
# Output: This sentence is output to the screen

a = 5

print('The value of a is', a)
# Output: The value of a is 5

# Output formatting
x = 5; y = 10
print('The value of x is {} and y is {}'.format(x,y))

print('I love {0} and {1}'.format('bread','butter'))
# Output: I love bread and butter

print('I love {1} and {0}'.format('bread','butter'))
# Output: I love butter and bread

-----------13--------------
Python Input

To allow flexibility we might want to take the input from the user. In Python, we have the input() function to allow this. The syntax for input() is

input([prompt])
where prompt is the string we wish to display on the screen. It is optional.

num = input('Enter a number: ')
-----------14--------------
When our program grows bigger, it is a good idea to break it into different modules.
A module is a file containing Python definitions and statements. Python modules have a filename and end with the extension .py.

import math
print(math.pi)

from math import pi
pi

import sys
sys.path

-----------14--------------
Python Operators
Operators are special symbols in Python that carry out arithmetic or logical computation. The value that the operator operates on is called the operand.

# Arithmetic operators
x = 15
y = 4
# Output: x + y = 19
print('x + y =',x+y)
# Output: x - y = 11
print('x - y =',x-y)
# Output: x * y = 60
print('x * y =',x*y)
# Output: x / y = 3.75
print('x / y =',x/y)
# Output: x // y = 3
print('x // y =',x//y)
# Output: x ** y = 50625
print('x ** y =',x**y)

# Comparison operators
x = 10
y = 12
# Output: x > y is False
print('x > y  is',x>y)
# Output: x < y is True
print('x < y  is',x<y)
# Output: x == y is False
print('x == y is',x==y)
# Output: x != y is True
print('x != y is',x!=y)
# Output: x >= y is False
print('x >= y is',x>=y)
# Output: x <= y is True
print('x <= y is',x<=y)

# Logical operators
x = True
y = False
# Output: x and y is False
print('x and y is',x and y)
# Output: x or y is True
print('x or y is',x or y)
# Output: not x is False
print('not x is',not x)

# Bitwise operators
# Special operators
# Identity operators
# Membership operators
# https://www.programiz.com/python-programming/operators








Python Project
https://app.pluralsight.com/projects/build-a-job-board-with-python-flask



